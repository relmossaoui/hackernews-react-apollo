
type Query {
    info: String!
    feed(filter: String, skip: Int, first: Int, orderBy: LinkOrderByInput): Feed
    link(id: ID!) : Link
}

type Mutation {
    post(url: String!, description: String!): Link!
    # Update a link
    updateLink(id: ID!, url: String, description: String): Link

    # Delete a link
    deleteLink(id: ID!): Link

    # upvote a link
    voteLink(id: ID!): Vote

    signup(email: String!, password: String!, name: String!): AuthPayload!
    login(email: String!, password: String): AuthPayload!
}

type Subscription {
    newLink: Link
    newVote: Vote
}

type Feed { 
    links: [Link!]!
    count: Int
}

type Link {
    id: ID!
    description: String!
    url: String!
    postedBy: User
    votes: [Vote!]!
}

type AuthPayload {
    user: User
    token: String
}

type User {
    id: ID!
    name: String!
    email: String!
    links: [Link!]!
}

type Vote {
    id: ID!
    user: User!
    link: Link!
}

enum LinkOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}